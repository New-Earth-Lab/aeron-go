// Copyright 2022 Steven Stern
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// TODO: The test fixtures are getting unwieldy, especially as we add more tests and will begin to reuse fixtures
// across tests.  A common pattern in Go is to put fixtures under /testdata.  If the aeron-go maintainers like this
// pattern, we can move them all here, and create a script to auto-update the mocks.

package testdata

import (
	"github.com/lirm/aeron-go/aeron/counters"
	"github.com/stretchr/testify/mock"
)

// If AvailableCounterHandler changes, recreate the mock code with the below command.
// mockery --name=AvailableCounterHandler --inpackage --structname=MockAvailableCounterHandler --print

// Code generated by mockery v2.14.0. DO NOT EDIT.

// MockAvailableCounterHandler is an autogenerated mock type for the AvailableCounterHandler type
type MockAvailableCounterHandler struct {
	mock.Mock
}

// Handle provides a mock function with given fields: countersReader, registrationId, counterId
func (_m *MockAvailableCounterHandler) Handle(countersReader *counters.Reader, registrationId int64, counterId int32) {
	_m.Called(countersReader, registrationId, counterId)
}

type mockConstructorTestingTNewMockAvailableCounterHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAvailableCounterHandler creates a new instance of MockAvailableCounterHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAvailableCounterHandler(t mockConstructorTestingTNewMockAvailableCounterHandler) *MockAvailableCounterHandler {
	mock := &MockAvailableCounterHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
