// Copyright 2022 Steven Stern
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package testdata

import (
	"github.com/lirm/aeron-go/aeron/counters"
	"github.com/stretchr/testify/mock"
)

// If UnavailableCounterHandler changes, recreate the mock code with the below command.
// mockery --name=UnavailableCounterHandler --inpackage --structname=MockUnavailableCounterHandler --print

// Code generated by mockery v2.14.0. DO NOT EDIT.

// MockUnavailableCounterHandler is an autogenerated mock type for the UnavailableCounterHandler type
type MockUnavailableCounterHandler struct {
	mock.Mock
}

// Handle provides a mock function with given fields: countersReader, registrationId, counterId
func (_m *MockUnavailableCounterHandler) Handle(countersReader *counters.Reader, registrationId int64, counterId int32) {
	_m.Called(countersReader, registrationId, counterId)
}

type mockConstructorTestingTNewMockUnavailableCounterHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUnavailableCounterHandler creates a new instance of MockUnavailableCounterHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUnavailableCounterHandler(t mockConstructorTestingTNewMockUnavailableCounterHandler) *MockUnavailableCounterHandler {
	mock := &MockUnavailableCounterHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
